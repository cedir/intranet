'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.42
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("dsComprobantes"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsComprobantes
    Inherits System.Data.DataSet
    
    Private tableComprobantes As ComprobantesDataTable
    
    Private tableLineaDeComprobantes As LineaDeComprobantesDataTable
    
    Private tableTipoComprobantes As TipoComprobantesDataTable
    
    Private relationComprobante_LineaDeComprobante As System.Data.DataRelation
    
    Private relationTipoComprobantes_Comprobantes As System.Data.DataRelation
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Comprobantes")) Is Nothing) Then
                MyBase.Tables.Add(New ComprobantesDataTable(ds.Tables("Comprobantes")))
            End If
            If (Not (ds.Tables("LineaDeComprobantes")) Is Nothing) Then
                MyBase.Tables.Add(New LineaDeComprobantesDataTable(ds.Tables("LineaDeComprobantes")))
            End If
            If (Not (ds.Tables("TipoComprobantes")) Is Nothing) Then
                MyBase.Tables.Add(New TipoComprobantesDataTable(ds.Tables("TipoComprobantes")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Comprobantes() As ComprobantesDataTable
        Get
            Return Me.tableComprobantes
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property LineaDeComprobantes() As LineaDeComprobantesDataTable
        Get
            Return Me.tableLineaDeComprobantes
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TipoComprobantes() As TipoComprobantesDataTable
        Get
            Return Me.tableTipoComprobantes
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.BrowsableAttribute(true),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As dsComprobantes = CType(MyBase.Clone,dsComprobantes)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("Comprobantes")) Is Nothing) Then
                MyBase.Tables.Add(New ComprobantesDataTable(ds.Tables("Comprobantes")))
            End If
            If (Not (ds.Tables("LineaDeComprobantes")) Is Nothing) Then
                MyBase.Tables.Add(New LineaDeComprobantesDataTable(ds.Tables("LineaDeComprobantes")))
            End If
            If (Not (ds.Tables("TipoComprobantes")) Is Nothing) Then
                MyBase.Tables.Add(New TipoComprobantesDataTable(ds.Tables("TipoComprobantes")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableComprobantes = CType(MyBase.Tables("Comprobantes"),ComprobantesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableComprobantes) Is Nothing) Then
                Me.tableComprobantes.InitVars
            End If
        End If
        Me.tableLineaDeComprobantes = CType(MyBase.Tables("LineaDeComprobantes"),LineaDeComprobantesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableLineaDeComprobantes) Is Nothing) Then
                Me.tableLineaDeComprobantes.InitVars
            End If
        End If
        Me.tableTipoComprobantes = CType(MyBase.Tables("TipoComprobantes"),TipoComprobantesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTipoComprobantes) Is Nothing) Then
                Me.tableTipoComprobantes.InitVars
            End If
        End If
        Me.relationComprobante_LineaDeComprobante = Me.Relations("Comprobante_LineaDeComprobante")
        Me.relationTipoComprobantes_Comprobantes = Me.Relations("TipoComprobantes_Comprobantes")
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsComprobantes"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsComprobante.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableComprobantes = New ComprobantesDataTable
        MyBase.Tables.Add(Me.tableComprobantes)
        Me.tableLineaDeComprobantes = New LineaDeComprobantesDataTable
        MyBase.Tables.Add(Me.tableLineaDeComprobantes)
        Me.tableTipoComprobantes = New TipoComprobantesDataTable
        MyBase.Tables.Add(Me.tableTipoComprobantes)
        Me.relationComprobante_LineaDeComprobante = New System.Data.DataRelation("Comprobante_LineaDeComprobante", New System.Data.DataColumn() {Me.tableComprobantes.idComprobanteColumn}, New System.Data.DataColumn() {Me.tableLineaDeComprobantes.idComprobanteColumn}, false)
        Me.Relations.Add(Me.relationComprobante_LineaDeComprobante)
        Me.relationTipoComprobantes_Comprobantes = New System.Data.DataRelation("TipoComprobantes_Comprobantes", New System.Data.DataColumn() {Me.tableTipoComprobantes.idColumn}, New System.Data.DataColumn() {Me.tableComprobantes.idTipoComprobanteColumn}, false)
        Me.Relations.Add(Me.relationTipoComprobantes_Comprobantes)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeComprobantes() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeLineaDeComprobantes() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTipoComprobantes() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsComprobantes = New dsComprobantes
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function
    
    Public Delegate Sub ComprobantesRowChangeEventHandler(ByVal sender As Object, ByVal e As ComprobantesRowChangeEvent)
    
    Public Delegate Sub LineaDeComprobantesRowChangeEventHandler(ByVal sender As Object, ByVal e As LineaDeComprobantesRowChangeEvent)
    
    Public Delegate Sub TipoComprobantesRowChangeEventHandler(ByVal sender As Object, ByVal e As TipoComprobantesRowChangeEvent)
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ComprobantesDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnnroComprobante As System.Data.DataColumn
        
        Private columntipoComprobante As System.Data.DataColumn
        
        Private columnidComprobante As System.Data.DataColumn
        
        Private columnidTipoComprobante As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Comprobantes"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nroComprobanteColumn() As System.Data.DataColumn
            Get
                Return Me.columnnroComprobante
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tipoComprobanteColumn() As System.Data.DataColumn
            Get
                Return Me.columntipoComprobante
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property idComprobanteColumn() As System.Data.DataColumn
            Get
                Return Me.columnidComprobante
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property idTipoComprobanteColumn() As System.Data.DataColumn
            Get
                Return Me.columnidTipoComprobante
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ComprobantesRow
            Get
                Return CType(Me.Rows(index),ComprobantesRow)
            End Get
        End Property
        
        Public Event ComprobantesRowChanging As ComprobantesRowChangeEventHandler
        
        Public Event ComprobantesRowChanged As ComprobantesRowChangeEventHandler
        
        Public Event ComprobantesRowDeleting As ComprobantesRowChangeEventHandler
        
        Public Event ComprobantesRowDeleted As ComprobantesRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddComprobantesRow(ByVal row As ComprobantesRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddComprobantesRow(ByVal nroComprobante As String, ByVal tipoComprobante As String, ByVal idComprobante As String, ByVal parentTipoComprobantesRowByTipoComprobantes_Comprobantes As TipoComprobantesRow) As ComprobantesRow
            Dim rowComprobantesRow As ComprobantesRow = CType(Me.NewRow,ComprobantesRow)
            rowComprobantesRow.ItemArray = New Object() {nroComprobante, tipoComprobante, idComprobante, parentTipoComprobantesRowByTipoComprobantes_Comprobantes(0)}
            Me.Rows.Add(rowComprobantesRow)
            Return rowComprobantesRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As ComprobantesDataTable = CType(MyBase.Clone,ComprobantesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New ComprobantesDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnroComprobante = MyBase.Columns("nroComprobante")
            Me.columntipoComprobante = MyBase.Columns("tipoComprobante")
            Me.columnidComprobante = MyBase.Columns("idComprobante")
            Me.columnidTipoComprobante = MyBase.Columns("idTipoComprobante")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnroComprobante = New System.Data.DataColumn("nroComprobante", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnroComprobante)
            Me.columntipoComprobante = New System.Data.DataColumn("tipoComprobante", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntipoComprobante)
            Me.columnidComprobante = New System.Data.DataColumn("idComprobante", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnidComprobante)
            Me.columnidTipoComprobante = New System.Data.DataColumn("idTipoComprobante", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnidTipoComprobante)
            Me.Constraints.Add(New System.Data.UniqueConstraint("ComprobanteKey1", New System.Data.DataColumn() {Me.columnidComprobante}, false))
            Me.columnidComprobante.Unique = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewComprobantesRow() As ComprobantesRow
            Return CType(Me.NewRow,ComprobantesRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New ComprobantesRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ComprobantesRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ComprobantesRowChangedEvent) Is Nothing) Then
                RaiseEvent ComprobantesRowChanged(Me, New ComprobantesRowChangeEvent(CType(e.Row,ComprobantesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ComprobantesRowChangingEvent) Is Nothing) Then
                RaiseEvent ComprobantesRowChanging(Me, New ComprobantesRowChangeEvent(CType(e.Row,ComprobantesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ComprobantesRowDeletedEvent) Is Nothing) Then
                RaiseEvent ComprobantesRowDeleted(Me, New ComprobantesRowChangeEvent(CType(e.Row,ComprobantesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ComprobantesRowDeletingEvent) Is Nothing) Then
                RaiseEvent ComprobantesRowDeleting(Me, New ComprobantesRowChangeEvent(CType(e.Row,ComprobantesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveComprobantesRow(ByVal row As ComprobantesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsComprobantes = New dsComprobantes
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ComprobantesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class LineaDeComprobantesDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnconcepto As System.Data.DataColumn
        
        Private columnsubtotal As System.Data.DataColumn
        
        Private columnidComprobante As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "LineaDeComprobantes"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property conceptoColumn() As System.Data.DataColumn
            Get
                Return Me.columnconcepto
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property subtotalColumn() As System.Data.DataColumn
            Get
                Return Me.columnsubtotal
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property idComprobanteColumn() As System.Data.DataColumn
            Get
                Return Me.columnidComprobante
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As LineaDeComprobantesRow
            Get
                Return CType(Me.Rows(index),LineaDeComprobantesRow)
            End Get
        End Property
        
        Public Event LineaDeComprobantesRowChanging As LineaDeComprobantesRowChangeEventHandler
        
        Public Event LineaDeComprobantesRowChanged As LineaDeComprobantesRowChangeEventHandler
        
        Public Event LineaDeComprobantesRowDeleting As LineaDeComprobantesRowChangeEventHandler
        
        Public Event LineaDeComprobantesRowDeleted As LineaDeComprobantesRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddLineaDeComprobantesRow(ByVal row As LineaDeComprobantesRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddLineaDeComprobantesRow(ByVal concepto As String, ByVal subtotal As String, ByVal parentComprobantesRowByComprobante_LineaDeComprobante As ComprobantesRow) As LineaDeComprobantesRow
            Dim rowLineaDeComprobantesRow As LineaDeComprobantesRow = CType(Me.NewRow,LineaDeComprobantesRow)
            rowLineaDeComprobantesRow.ItemArray = New Object() {concepto, subtotal, parentComprobantesRowByComprobante_LineaDeComprobante(2)}
            Me.Rows.Add(rowLineaDeComprobantesRow)
            Return rowLineaDeComprobantesRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As LineaDeComprobantesDataTable = CType(MyBase.Clone,LineaDeComprobantesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New LineaDeComprobantesDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnconcepto = MyBase.Columns("concepto")
            Me.columnsubtotal = MyBase.Columns("subtotal")
            Me.columnidComprobante = MyBase.Columns("idComprobante")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnconcepto = New System.Data.DataColumn("concepto", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnconcepto)
            Me.columnsubtotal = New System.Data.DataColumn("subtotal", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsubtotal)
            Me.columnidComprobante = New System.Data.DataColumn("idComprobante", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnidComprobante)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewLineaDeComprobantesRow() As LineaDeComprobantesRow
            Return CType(Me.NewRow,LineaDeComprobantesRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New LineaDeComprobantesRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(LineaDeComprobantesRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.LineaDeComprobantesRowChangedEvent) Is Nothing) Then
                RaiseEvent LineaDeComprobantesRowChanged(Me, New LineaDeComprobantesRowChangeEvent(CType(e.Row,LineaDeComprobantesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.LineaDeComprobantesRowChangingEvent) Is Nothing) Then
                RaiseEvent LineaDeComprobantesRowChanging(Me, New LineaDeComprobantesRowChangeEvent(CType(e.Row,LineaDeComprobantesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.LineaDeComprobantesRowDeletedEvent) Is Nothing) Then
                RaiseEvent LineaDeComprobantesRowDeleted(Me, New LineaDeComprobantesRowChangeEvent(CType(e.Row,LineaDeComprobantesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.LineaDeComprobantesRowDeletingEvent) Is Nothing) Then
                RaiseEvent LineaDeComprobantesRowDeleting(Me, New LineaDeComprobantesRowChangeEvent(CType(e.Row,LineaDeComprobantesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveLineaDeComprobantesRow(ByVal row As LineaDeComprobantesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsComprobantes = New dsComprobantes
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "LineaDeComprobantesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TipoComprobantesDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnid As System.Data.DataColumn
        
        Private columndescripcion As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TipoComprobantes"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property idColumn() As System.Data.DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property descripcionColumn() As System.Data.DataColumn
            Get
                Return Me.columndescripcion
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TipoComprobantesRow
            Get
                Return CType(Me.Rows(index),TipoComprobantesRow)
            End Get
        End Property
        
        Public Event TipoComprobantesRowChanging As TipoComprobantesRowChangeEventHandler
        
        Public Event TipoComprobantesRowChanged As TipoComprobantesRowChangeEventHandler
        
        Public Event TipoComprobantesRowDeleting As TipoComprobantesRowChangeEventHandler
        
        Public Event TipoComprobantesRowDeleted As TipoComprobantesRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTipoComprobantesRow(ByVal row As TipoComprobantesRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTipoComprobantesRow(ByVal id As String, ByVal descripcion As String) As TipoComprobantesRow
            Dim rowTipoComprobantesRow As TipoComprobantesRow = CType(Me.NewRow,TipoComprobantesRow)
            rowTipoComprobantesRow.ItemArray = New Object() {id, descripcion}
            Me.Rows.Add(rowTipoComprobantesRow)
            Return rowTipoComprobantesRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As TipoComprobantesDataTable = CType(MyBase.Clone,TipoComprobantesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New TipoComprobantesDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnid = MyBase.Columns("id")
            Me.columndescripcion = MyBase.Columns("descripcion")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnid = New System.Data.DataColumn("id", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid)
            Me.columndescripcion = New System.Data.DataColumn("descripcion", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndescripcion)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTipoComprobantesRow() As TipoComprobantesRow
            Return CType(Me.NewRow,TipoComprobantesRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New TipoComprobantesRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TipoComprobantesRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TipoComprobantesRowChangedEvent) Is Nothing) Then
                RaiseEvent TipoComprobantesRowChanged(Me, New TipoComprobantesRowChangeEvent(CType(e.Row,TipoComprobantesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TipoComprobantesRowChangingEvent) Is Nothing) Then
                RaiseEvent TipoComprobantesRowChanging(Me, New TipoComprobantesRowChangeEvent(CType(e.Row,TipoComprobantesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TipoComprobantesRowDeletedEvent) Is Nothing) Then
                RaiseEvent TipoComprobantesRowDeleted(Me, New TipoComprobantesRowChangeEvent(CType(e.Row,TipoComprobantesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TipoComprobantesRowDeletingEvent) Is Nothing) Then
                RaiseEvent TipoComprobantesRowDeleting(Me, New TipoComprobantesRowChangeEvent(CType(e.Row,TipoComprobantesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTipoComprobantesRow(ByVal row As TipoComprobantesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsComprobantes = New dsComprobantes
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TipoComprobantesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ComprobantesRow
        Inherits System.Data.DataRow
        
        Private tableComprobantes As ComprobantesDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableComprobantes = CType(Me.Table,ComprobantesDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nroComprobante() As String
            Get
                Try 
                    Return CType(Me(Me.tableComprobantes.nroComprobanteColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'nroComprobante' de la tabla 'Comprobantes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComprobantes.nroComprobanteColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tipoComprobante() As String
            Get
                Try 
                    Return CType(Me(Me.tableComprobantes.tipoComprobanteColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'tipoComprobante' de la tabla 'Comprobantes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComprobantes.tipoComprobanteColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property idComprobante() As String
            Get
                Try 
                    Return CType(Me(Me.tableComprobantes.idComprobanteColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'idComprobante' de la tabla 'Comprobantes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComprobantes.idComprobanteColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property idTipoComprobante() As String
            Get
                Try 
                    Return CType(Me(Me.tableComprobantes.idTipoComprobanteColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'idTipoComprobante' de la tabla 'Comprobantes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComprobantes.idTipoComprobanteColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TipoComprobantesRow() As TipoComprobantesRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("TipoComprobantes_Comprobantes")),TipoComprobantesRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("TipoComprobantes_Comprobantes"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnroComprobanteNull() As Boolean
            Return Me.IsNull(Me.tableComprobantes.nroComprobanteColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnroComprobanteNull()
            Me(Me.tableComprobantes.nroComprobanteColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstipoComprobanteNull() As Boolean
            Return Me.IsNull(Me.tableComprobantes.tipoComprobanteColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettipoComprobanteNull()
            Me(Me.tableComprobantes.tipoComprobanteColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsidComprobanteNull() As Boolean
            Return Me.IsNull(Me.tableComprobantes.idComprobanteColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetidComprobanteNull()
            Me(Me.tableComprobantes.idComprobanteColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsidTipoComprobanteNull() As Boolean
            Return Me.IsNull(Me.tableComprobantes.idTipoComprobanteColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetidTipoComprobanteNull()
            Me(Me.tableComprobantes.idTipoComprobanteColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetLineaDeComprobantesRows() As LineaDeComprobantesRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Comprobante_LineaDeComprobante")),LineaDeComprobantesRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class LineaDeComprobantesRow
        Inherits System.Data.DataRow
        
        Private tableLineaDeComprobantes As LineaDeComprobantesDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableLineaDeComprobantes = CType(Me.Table,LineaDeComprobantesDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property concepto() As String
            Get
                Try 
                    Return CType(Me(Me.tableLineaDeComprobantes.conceptoColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'concepto' de la tabla 'LineaDeComprobantes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLineaDeComprobantes.conceptoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property subtotal() As String
            Get
                Try 
                    Return CType(Me(Me.tableLineaDeComprobantes.subtotalColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'subtotal' de la tabla 'LineaDeComprobantes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLineaDeComprobantes.subtotalColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property idComprobante() As String
            Get
                Try 
                    Return CType(Me(Me.tableLineaDeComprobantes.idComprobanteColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'idComprobante' de la tabla 'LineaDeComprobantes' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableLineaDeComprobantes.idComprobanteColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ComprobanteRow() As ComprobantesRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Comprobante_LineaDeComprobante")),ComprobantesRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Comprobante_LineaDeComprobante"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsconceptoNull() As Boolean
            Return Me.IsNull(Me.tableLineaDeComprobantes.conceptoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetconceptoNull()
            Me(Me.tableLineaDeComprobantes.conceptoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssubtotalNull() As Boolean
            Return Me.IsNull(Me.tableLineaDeComprobantes.subtotalColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsubtotalNull()
            Me(Me.tableLineaDeComprobantes.subtotalColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsidComprobanteNull() As Boolean
            Return Me.IsNull(Me.tableLineaDeComprobantes.idComprobanteColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetidComprobanteNull()
            Me(Me.tableLineaDeComprobantes.idComprobanteColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TipoComprobantesRow
        Inherits System.Data.DataRow
        
        Private tableTipoComprobantes As TipoComprobantesDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTipoComprobantes = CType(Me.Table,TipoComprobantesDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property id() As String
            Get
                Try 
                    Return CType(Me(Me.tableTipoComprobantes.idColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'id' de la tabla 'TipoComprobantes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTipoComprobantes.idColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property descripcion() As String
            Get
                Try 
                    Return CType(Me(Me.tableTipoComprobantes.descripcionColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'descripcion' de la tabla 'TipoComprobantes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTipoComprobantes.descripcionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsidNull() As Boolean
            Return Me.IsNull(Me.tableTipoComprobantes.idColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetidNull()
            Me(Me.tableTipoComprobantes.idColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdescripcionNull() As Boolean
            Return Me.IsNull(Me.tableTipoComprobantes.descripcionColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdescripcionNull()
            Me(Me.tableTipoComprobantes.descripcionColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetComprobantesRows() As ComprobantesRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("TipoComprobantes_Comprobantes")),ComprobantesRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ComprobantesRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As ComprobantesRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ComprobantesRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ComprobantesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class LineaDeComprobantesRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As LineaDeComprobantesRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As LineaDeComprobantesRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As LineaDeComprobantesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TipoComprobantesRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As TipoComprobantesRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TipoComprobantesRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TipoComprobantesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
