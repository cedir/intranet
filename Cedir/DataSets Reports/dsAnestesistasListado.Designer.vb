'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.42
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("dsAnestesistasListado"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsAnestesistasListado
    Inherits System.Data.DataSet
    
    Private tabletbl As tblDataTable
    
    Private tabletblAnestesista As tblAnestesistaDataTable
    
    Private tabletblEstudioSinComp As tblEstudioSinCompDataTable
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("tbl")) Is Nothing) Then
                MyBase.Tables.Add(New tblDataTable(ds.Tables("tbl")))
            End If
            If (Not (ds.Tables("tblAnestesista")) Is Nothing) Then
                MyBase.Tables.Add(New tblAnestesistaDataTable(ds.Tables("tblAnestesista")))
            End If
            If (Not (ds.Tables("tblEstudioSinComp")) Is Nothing) Then
                MyBase.Tables.Add(New tblEstudioSinCompDataTable(ds.Tables("tblEstudioSinComp")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tbl() As tblDataTable
        Get
            Return Me.tabletbl
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblAnestesista() As tblAnestesistaDataTable
        Get
            Return Me.tabletblAnestesista
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblEstudioSinComp() As tblEstudioSinCompDataTable
        Get
            Return Me.tabletblEstudioSinComp
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.BrowsableAttribute(true),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As dsAnestesistasListado = CType(MyBase.Clone,dsAnestesistasListado)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("tbl")) Is Nothing) Then
                MyBase.Tables.Add(New tblDataTable(ds.Tables("tbl")))
            End If
            If (Not (ds.Tables("tblAnestesista")) Is Nothing) Then
                MyBase.Tables.Add(New tblAnestesistaDataTable(ds.Tables("tblAnestesista")))
            End If
            If (Not (ds.Tables("tblEstudioSinComp")) Is Nothing) Then
                MyBase.Tables.Add(New tblEstudioSinCompDataTable(ds.Tables("tblEstudioSinComp")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tabletbl = CType(MyBase.Tables("tbl"),tblDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletbl) Is Nothing) Then
                Me.tabletbl.InitVars
            End If
        End If
        Me.tabletblAnestesista = CType(MyBase.Tables("tblAnestesista"),tblAnestesistaDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblAnestesista) Is Nothing) Then
                Me.tabletblAnestesista.InitVars
            End If
        End If
        Me.tabletblEstudioSinComp = CType(MyBase.Tables("tblEstudioSinComp"),tblEstudioSinCompDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblEstudioSinComp) Is Nothing) Then
                Me.tabletblEstudioSinComp.InitVars
            End If
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsAnestesistasListado"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsAnestesistasListado.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
        Me.tabletbl = New tblDataTable
        MyBase.Tables.Add(Me.tabletbl)
        Me.tabletblAnestesista = New tblAnestesistaDataTable
        MyBase.Tables.Add(Me.tabletblAnestesista)
        Me.tabletblEstudioSinComp = New tblEstudioSinCompDataTable
        MyBase.Tables.Add(Me.tabletblEstudioSinComp)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetbl() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetblAnestesista() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetblEstudioSinComp() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsAnestesistasListado = New dsAnestesistasListado
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function
    
    Public Delegate Sub tblRowChangeEventHandler(ByVal sender As Object, ByVal e As tblRowChangeEvent)
    
    Public Delegate Sub tblAnestesistaRowChangeEventHandler(ByVal sender As Object, ByVal e As tblAnestesistaRowChangeEvent)
    
    Public Delegate Sub tblEstudioSinCompRowChangeEventHandler(ByVal sender As Object, ByVal e As tblEstudioSinCompRowChangeEvent)
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columncolFecha As System.Data.DataColumn
        
        Private columncolOS As System.Data.DataColumn
        
        Private columncolPaciente As System.Data.DataColumn
        
        Private columncolEstudio As System.Data.DataColumn
        
        Private columncolRetencion As System.Data.DataColumn
        
        Private columncolImporte As System.Data.DataColumn
        
        Private columncolIva As System.Data.DataColumn
        
        Private columncolApagar As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tbl"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property colFechaColumn() As System.Data.DataColumn
            Get
                Return Me.columncolFecha
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property colOSColumn() As System.Data.DataColumn
            Get
                Return Me.columncolOS
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property colPacienteColumn() As System.Data.DataColumn
            Get
                Return Me.columncolPaciente
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property colEstudioColumn() As System.Data.DataColumn
            Get
                Return Me.columncolEstudio
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property colRetencionColumn() As System.Data.DataColumn
            Get
                Return Me.columncolRetencion
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property colImporteColumn() As System.Data.DataColumn
            Get
                Return Me.columncolImporte
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property colIvaColumn() As System.Data.DataColumn
            Get
                Return Me.columncolIva
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property colApagarColumn() As System.Data.DataColumn
            Get
                Return Me.columncolApagar
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblRow
            Get
                Return CType(Me.Rows(index),tblRow)
            End Get
        End Property
        
        Public Event tblRowChanging As tblRowChangeEventHandler
        
        Public Event tblRowChanged As tblRowChangeEventHandler
        
        Public Event tblRowDeleting As tblRowChangeEventHandler
        
        Public Event tblRowDeleted As tblRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddtblRow(ByVal row As tblRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddtblRow(ByVal colFecha As String, ByVal colOS As String, ByVal colPaciente As String, ByVal colEstudio As String, ByVal colRetencion As String, ByVal colImporte As String, ByVal colIva As String, ByVal colApagar As String) As tblRow
            Dim rowtblRow As tblRow = CType(Me.NewRow,tblRow)
            rowtblRow.ItemArray = New Object() {colFecha, colOS, colPaciente, colEstudio, colRetencion, colImporte, colIva, colApagar}
            Me.Rows.Add(rowtblRow)
            Return rowtblRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As tblDataTable = CType(MyBase.Clone,tblDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New tblDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncolFecha = MyBase.Columns("colFecha")
            Me.columncolOS = MyBase.Columns("colOS")
            Me.columncolPaciente = MyBase.Columns("colPaciente")
            Me.columncolEstudio = MyBase.Columns("colEstudio")
            Me.columncolRetencion = MyBase.Columns("colRetencion")
            Me.columncolImporte = MyBase.Columns("colImporte")
            Me.columncolIva = MyBase.Columns("colIva")
            Me.columncolApagar = MyBase.Columns("colApagar")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncolFecha = New System.Data.DataColumn("colFecha", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncolFecha)
            Me.columncolOS = New System.Data.DataColumn("colOS", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncolOS)
            Me.columncolPaciente = New System.Data.DataColumn("colPaciente", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncolPaciente)
            Me.columncolEstudio = New System.Data.DataColumn("colEstudio", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncolEstudio)
            Me.columncolRetencion = New System.Data.DataColumn("colRetencion", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncolRetencion)
            Me.columncolImporte = New System.Data.DataColumn("colImporte", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncolImporte)
            Me.columncolIva = New System.Data.DataColumn("colIva", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncolIva)
            Me.columncolApagar = New System.Data.DataColumn("colApagar", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncolApagar)
            Me.columncolRetencion.DefaultValue = CType("",String)
            Me.columncolIva.DefaultValue = CType("",String)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewtblRow() As tblRow
            Return CType(Me.NewRow,tblRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New tblRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(tblRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblRowChangedEvent) Is Nothing) Then
                RaiseEvent tblRowChanged(Me, New tblRowChangeEvent(CType(e.Row,tblRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblRowChangingEvent) Is Nothing) Then
                RaiseEvent tblRowChanging(Me, New tblRowChangeEvent(CType(e.Row,tblRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblRowDeleted(Me, New tblRowChangeEvent(CType(e.Row,tblRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblRowDeleting(Me, New tblRowChangeEvent(CType(e.Row,tblRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovetblRow(ByVal row As tblRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsAnestesistasListado = New dsAnestesistasListado
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblAnestesistaDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columncolNombre As System.Data.DataColumn
        
        Private columncolHonorariosExentos As System.Data.DataColumn
        
        Private columncolHonorarios105 As System.Data.DataColumn
        
        Private columncolHonorarios21 As System.Data.DataColumn
        
        Private columncolIva21 As System.Data.DataColumn
        
        Private columncolIva105 As System.Data.DataColumn
        
        Private columncolFechaLiquidacion As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblAnestesista"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property colNombreColumn() As System.Data.DataColumn
            Get
                Return Me.columncolNombre
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property colHonorariosExentosColumn() As System.Data.DataColumn
            Get
                Return Me.columncolHonorariosExentos
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property colHonorarios105Column() As System.Data.DataColumn
            Get
                Return Me.columncolHonorarios105
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property colHonorarios21Column() As System.Data.DataColumn
            Get
                Return Me.columncolHonorarios21
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property colIva21Column() As System.Data.DataColumn
            Get
                Return Me.columncolIva21
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property colIva105Column() As System.Data.DataColumn
            Get
                Return Me.columncolIva105
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property colFechaLiquidacionColumn() As System.Data.DataColumn
            Get
                Return Me.columncolFechaLiquidacion
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblAnestesistaRow
            Get
                Return CType(Me.Rows(index),tblAnestesistaRow)
            End Get
        End Property
        
        Public Event tblAnestesistaRowChanging As tblAnestesistaRowChangeEventHandler
        
        Public Event tblAnestesistaRowChanged As tblAnestesistaRowChangeEventHandler
        
        Public Event tblAnestesistaRowDeleting As tblAnestesistaRowChangeEventHandler
        
        Public Event tblAnestesistaRowDeleted As tblAnestesistaRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddtblAnestesistaRow(ByVal row As tblAnestesistaRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddtblAnestesistaRow(ByVal colNombre As String, ByVal colHonorariosExentos As Decimal, ByVal colHonorarios105 As Decimal, ByVal colHonorarios21 As Decimal, ByVal colIva21 As Decimal, ByVal colIva105 As Decimal, ByVal colFechaLiquidacion As String) As tblAnestesistaRow
            Dim rowtblAnestesistaRow As tblAnestesistaRow = CType(Me.NewRow,tblAnestesistaRow)
            rowtblAnestesistaRow.ItemArray = New Object() {colNombre, colHonorariosExentos, colHonorarios105, colHonorarios21, colIva21, colIva105, colFechaLiquidacion}
            Me.Rows.Add(rowtblAnestesistaRow)
            Return rowtblAnestesistaRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As tblAnestesistaDataTable = CType(MyBase.Clone,tblAnestesistaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New tblAnestesistaDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncolNombre = MyBase.Columns("colNombre")
            Me.columncolHonorariosExentos = MyBase.Columns("colHonorariosExentos")
            Me.columncolHonorarios105 = MyBase.Columns("colHonorarios105")
            Me.columncolHonorarios21 = MyBase.Columns("colHonorarios21")
            Me.columncolIva21 = MyBase.Columns("colIva21")
            Me.columncolIva105 = MyBase.Columns("colIva105")
            Me.columncolFechaLiquidacion = MyBase.Columns("colFechaLiquidacion")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncolNombre = New System.Data.DataColumn("colNombre", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncolNombre)
            Me.columncolHonorariosExentos = New System.Data.DataColumn("colHonorariosExentos", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncolHonorariosExentos)
            Me.columncolHonorarios105 = New System.Data.DataColumn("colHonorarios105", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncolHonorarios105)
            Me.columncolHonorarios21 = New System.Data.DataColumn("colHonorarios21", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncolHonorarios21)
            Me.columncolIva21 = New System.Data.DataColumn("colIva21", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncolIva21)
            Me.columncolIva105 = New System.Data.DataColumn("colIva105", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncolIva105)
            Me.columncolFechaLiquidacion = New System.Data.DataColumn("colFechaLiquidacion", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncolFechaLiquidacion)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewtblAnestesistaRow() As tblAnestesistaRow
            Return CType(Me.NewRow,tblAnestesistaRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New tblAnestesistaRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(tblAnestesistaRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblAnestesistaRowChangedEvent) Is Nothing) Then
                RaiseEvent tblAnestesistaRowChanged(Me, New tblAnestesistaRowChangeEvent(CType(e.Row,tblAnestesistaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblAnestesistaRowChangingEvent) Is Nothing) Then
                RaiseEvent tblAnestesistaRowChanging(Me, New tblAnestesistaRowChangeEvent(CType(e.Row,tblAnestesistaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblAnestesistaRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblAnestesistaRowDeleted(Me, New tblAnestesistaRowChangeEvent(CType(e.Row,tblAnestesistaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblAnestesistaRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblAnestesistaRowDeleting(Me, New tblAnestesistaRowChangeEvent(CType(e.Row,tblAnestesistaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovetblAnestesistaRow(ByVal row As tblAnestesistaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsAnestesistasListado = New dsAnestesistasListado
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblAnestesistaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblEstudioSinCompDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columncolFecha As System.Data.DataColumn
        
        Private columncolOS As System.Data.DataColumn
        
        Private columncolPaciente As System.Data.DataColumn
        
        Private columncolEstudio As System.Data.DataColumn
        
        Private columncolRetencion As System.Data.DataColumn
        
        Private columncolImporte As System.Data.DataColumn
        
        Private columncolIva As System.Data.DataColumn
        
        Private columncolApagar As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblEstudioSinComp"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property colFechaColumn() As System.Data.DataColumn
            Get
                Return Me.columncolFecha
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property colOSColumn() As System.Data.DataColumn
            Get
                Return Me.columncolOS
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property colPacienteColumn() As System.Data.DataColumn
            Get
                Return Me.columncolPaciente
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property colEstudioColumn() As System.Data.DataColumn
            Get
                Return Me.columncolEstudio
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property colRetencionColumn() As System.Data.DataColumn
            Get
                Return Me.columncolRetencion
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property colImporteColumn() As System.Data.DataColumn
            Get
                Return Me.columncolImporte
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property colIvaColumn() As System.Data.DataColumn
            Get
                Return Me.columncolIva
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property colApagarColumn() As System.Data.DataColumn
            Get
                Return Me.columncolApagar
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblEstudioSinCompRow
            Get
                Return CType(Me.Rows(index),tblEstudioSinCompRow)
            End Get
        End Property
        
        Public Event tblEstudioSinCompRowChanging As tblEstudioSinCompRowChangeEventHandler
        
        Public Event tblEstudioSinCompRowChanged As tblEstudioSinCompRowChangeEventHandler
        
        Public Event tblEstudioSinCompRowDeleting As tblEstudioSinCompRowChangeEventHandler
        
        Public Event tblEstudioSinCompRowDeleted As tblEstudioSinCompRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddtblEstudioSinCompRow(ByVal row As tblEstudioSinCompRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddtblEstudioSinCompRow(ByVal colFecha As String, ByVal colOS As String, ByVal colPaciente As String, ByVal colEstudio As String, ByVal colRetencion As String, ByVal colImporte As String, ByVal colIva As String, ByVal colApagar As Decimal) As tblEstudioSinCompRow
            Dim rowtblEstudioSinCompRow As tblEstudioSinCompRow = CType(Me.NewRow,tblEstudioSinCompRow)
            rowtblEstudioSinCompRow.ItemArray = New Object() {colFecha, colOS, colPaciente, colEstudio, colRetencion, colImporte, colIva, colApagar}
            Me.Rows.Add(rowtblEstudioSinCompRow)
            Return rowtblEstudioSinCompRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As tblEstudioSinCompDataTable = CType(MyBase.Clone,tblEstudioSinCompDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New tblEstudioSinCompDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncolFecha = MyBase.Columns("colFecha")
            Me.columncolOS = MyBase.Columns("colOS")
            Me.columncolPaciente = MyBase.Columns("colPaciente")
            Me.columncolEstudio = MyBase.Columns("colEstudio")
            Me.columncolRetencion = MyBase.Columns("colRetencion")
            Me.columncolImporte = MyBase.Columns("colImporte")
            Me.columncolIva = MyBase.Columns("colIva")
            Me.columncolApagar = MyBase.Columns("colApagar")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncolFecha = New System.Data.DataColumn("colFecha", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncolFecha)
            Me.columncolOS = New System.Data.DataColumn("colOS", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncolOS)
            Me.columncolPaciente = New System.Data.DataColumn("colPaciente", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncolPaciente)
            Me.columncolEstudio = New System.Data.DataColumn("colEstudio", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncolEstudio)
            Me.columncolRetencion = New System.Data.DataColumn("colRetencion", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncolRetencion)
            Me.columncolImporte = New System.Data.DataColumn("colImporte", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncolImporte)
            Me.columncolIva = New System.Data.DataColumn("colIva", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncolIva)
            Me.columncolApagar = New System.Data.DataColumn("colApagar", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncolApagar)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewtblEstudioSinCompRow() As tblEstudioSinCompRow
            Return CType(Me.NewRow,tblEstudioSinCompRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New tblEstudioSinCompRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(tblEstudioSinCompRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblEstudioSinCompRowChangedEvent) Is Nothing) Then
                RaiseEvent tblEstudioSinCompRowChanged(Me, New tblEstudioSinCompRowChangeEvent(CType(e.Row,tblEstudioSinCompRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblEstudioSinCompRowChangingEvent) Is Nothing) Then
                RaiseEvent tblEstudioSinCompRowChanging(Me, New tblEstudioSinCompRowChangeEvent(CType(e.Row,tblEstudioSinCompRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblEstudioSinCompRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblEstudioSinCompRowDeleted(Me, New tblEstudioSinCompRowChangeEvent(CType(e.Row,tblEstudioSinCompRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblEstudioSinCompRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblEstudioSinCompRowDeleting(Me, New tblEstudioSinCompRowChangeEvent(CType(e.Row,tblEstudioSinCompRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovetblEstudioSinCompRow(ByVal row As tblEstudioSinCompRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsAnestesistasListado = New dsAnestesistasListado
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblEstudioSinCompDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tblRow
        Inherits System.Data.DataRow
        
        Private tabletbl As tblDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletbl = CType(Me.Table,tblDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property colFecha() As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl.colFechaColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'colFecha' de la tabla 'tbl' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl.colFechaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property colOS() As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl.colOSColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'colOS' de la tabla 'tbl' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl.colOSColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property colPaciente() As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl.colPacienteColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'colPaciente' de la tabla 'tbl' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl.colPacienteColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property colEstudio() As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl.colEstudioColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'colEstudio' de la tabla 'tbl' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl.colEstudioColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property colRetencion() As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl.colRetencionColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'colRetencion' de la tabla 'tbl' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl.colRetencionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property colImporte() As String
            Get
                If Me.IscolImporteNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tabletbl.colImporteColumn),String)
                End If
            End Get
            Set
                Me(Me.tabletbl.colImporteColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property colIva() As String
            Get
                If Me.IscolIvaNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tabletbl.colIvaColumn),String)
                End If
            End Get
            Set
                Me(Me.tabletbl.colIvaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property colApagar() As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl.colApagarColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'colApagar' de la tabla 'tbl' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl.colApagarColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscolFechaNull() As Boolean
            Return Me.IsNull(Me.tabletbl.colFechaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcolFechaNull()
            Me(Me.tabletbl.colFechaColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscolOSNull() As Boolean
            Return Me.IsNull(Me.tabletbl.colOSColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcolOSNull()
            Me(Me.tabletbl.colOSColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscolPacienteNull() As Boolean
            Return Me.IsNull(Me.tabletbl.colPacienteColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcolPacienteNull()
            Me(Me.tabletbl.colPacienteColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscolEstudioNull() As Boolean
            Return Me.IsNull(Me.tabletbl.colEstudioColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcolEstudioNull()
            Me(Me.tabletbl.colEstudioColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscolRetencionNull() As Boolean
            Return Me.IsNull(Me.tabletbl.colRetencionColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcolRetencionNull()
            Me(Me.tabletbl.colRetencionColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscolImporteNull() As Boolean
            Return Me.IsNull(Me.tabletbl.colImporteColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcolImporteNull()
            Me(Me.tabletbl.colImporteColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscolIvaNull() As Boolean
            Return Me.IsNull(Me.tabletbl.colIvaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcolIvaNull()
            Me(Me.tabletbl.colIvaColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscolApagarNull() As Boolean
            Return Me.IsNull(Me.tabletbl.colApagarColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcolApagarNull()
            Me(Me.tabletbl.colApagarColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tblAnestesistaRow
        Inherits System.Data.DataRow
        
        Private tabletblAnestesista As tblAnestesistaDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblAnestesista = CType(Me.Table,tblAnestesistaDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property colNombre() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblAnestesista.colNombreColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'colNombre' de la tabla 'tblAnestesista' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblAnestesista.colNombreColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property colHonorariosExentos() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletblAnestesista.colHonorariosExentosColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'colHonorariosExentos' de la tabla 'tblAnestesista' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblAnestesista.colHonorariosExentosColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property colHonorarios105() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletblAnestesista.colHonorarios105Column),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'colHonorarios105' de la tabla 'tblAnestesista' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tabletblAnestesista.colHonorarios105Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property colHonorarios21() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletblAnestesista.colHonorarios21Column),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'colHonorarios21' de la tabla 'tblAnestesista' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblAnestesista.colHonorarios21Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property colIva21() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletblAnestesista.colIva21Column),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'colIva21' de la tabla 'tblAnestesista' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblAnestesista.colIva21Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property colIva105() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletblAnestesista.colIva105Column),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'colIva105' de la tabla 'tblAnestesista' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblAnestesista.colIva105Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property colFechaLiquidacion() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblAnestesista.colFechaLiquidacionColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'colFechaLiquidacion' de la tabla 'tblAnestesista' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblAnestesista.colFechaLiquidacionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscolNombreNull() As Boolean
            Return Me.IsNull(Me.tabletblAnestesista.colNombreColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcolNombreNull()
            Me(Me.tabletblAnestesista.colNombreColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscolHonorariosExentosNull() As Boolean
            Return Me.IsNull(Me.tabletblAnestesista.colHonorariosExentosColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcolHonorariosExentosNull()
            Me(Me.tabletblAnestesista.colHonorariosExentosColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscolHonorarios105Null() As Boolean
            Return Me.IsNull(Me.tabletblAnestesista.colHonorarios105Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcolHonorarios105Null()
            Me(Me.tabletblAnestesista.colHonorarios105Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscolHonorarios21Null() As Boolean
            Return Me.IsNull(Me.tabletblAnestesista.colHonorarios21Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcolHonorarios21Null()
            Me(Me.tabletblAnestesista.colHonorarios21Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscolIva21Null() As Boolean
            Return Me.IsNull(Me.tabletblAnestesista.colIva21Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcolIva21Null()
            Me(Me.tabletblAnestesista.colIva21Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscolIva105Null() As Boolean
            Return Me.IsNull(Me.tabletblAnestesista.colIva105Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcolIva105Null()
            Me(Me.tabletblAnestesista.colIva105Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscolFechaLiquidacionNull() As Boolean
            Return Me.IsNull(Me.tabletblAnestesista.colFechaLiquidacionColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcolFechaLiquidacionNull()
            Me(Me.tabletblAnestesista.colFechaLiquidacionColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tblEstudioSinCompRow
        Inherits System.Data.DataRow
        
        Private tabletblEstudioSinComp As tblEstudioSinCompDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblEstudioSinComp = CType(Me.Table,tblEstudioSinCompDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property colFecha() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblEstudioSinComp.colFechaColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'colFecha' de la tabla 'tblEstudioSinComp' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEstudioSinComp.colFechaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property colOS() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblEstudioSinComp.colOSColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'colOS' de la tabla 'tblEstudioSinComp' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEstudioSinComp.colOSColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property colPaciente() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblEstudioSinComp.colPacienteColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'colPaciente' de la tabla 'tblEstudioSinComp' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEstudioSinComp.colPacienteColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property colEstudio() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblEstudioSinComp.colEstudioColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'colEstudio' de la tabla 'tblEstudioSinComp' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEstudioSinComp.colEstudioColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property colRetencion() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblEstudioSinComp.colRetencionColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'colRetencion' de la tabla 'tblEstudioSinComp' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEstudioSinComp.colRetencionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property colImporte() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblEstudioSinComp.colImporteColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'colImporte' de la tabla 'tblEstudioSinComp' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEstudioSinComp.colImporteColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property colIva() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblEstudioSinComp.colIvaColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'colIva' de la tabla 'tblEstudioSinComp' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEstudioSinComp.colIvaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property colApagar() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletblEstudioSinComp.colApagarColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'colApagar' de la tabla 'tblEstudioSinComp' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEstudioSinComp.colApagarColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscolFechaNull() As Boolean
            Return Me.IsNull(Me.tabletblEstudioSinComp.colFechaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcolFechaNull()
            Me(Me.tabletblEstudioSinComp.colFechaColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscolOSNull() As Boolean
            Return Me.IsNull(Me.tabletblEstudioSinComp.colOSColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcolOSNull()
            Me(Me.tabletblEstudioSinComp.colOSColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscolPacienteNull() As Boolean
            Return Me.IsNull(Me.tabletblEstudioSinComp.colPacienteColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcolPacienteNull()
            Me(Me.tabletblEstudioSinComp.colPacienteColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscolEstudioNull() As Boolean
            Return Me.IsNull(Me.tabletblEstudioSinComp.colEstudioColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcolEstudioNull()
            Me(Me.tabletblEstudioSinComp.colEstudioColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscolRetencionNull() As Boolean
            Return Me.IsNull(Me.tabletblEstudioSinComp.colRetencionColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcolRetencionNull()
            Me(Me.tabletblEstudioSinComp.colRetencionColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscolImporteNull() As Boolean
            Return Me.IsNull(Me.tabletblEstudioSinComp.colImporteColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcolImporteNull()
            Me(Me.tabletblEstudioSinComp.colImporteColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscolIvaNull() As Boolean
            Return Me.IsNull(Me.tabletblEstudioSinComp.colIvaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcolIvaNull()
            Me(Me.tabletblEstudioSinComp.colIvaColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscolApagarNull() As Boolean
            Return Me.IsNull(Me.tabletblEstudioSinComp.colApagarColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcolApagarNull()
            Me(Me.tabletblEstudioSinComp.colApagarColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tblRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As tblRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tblRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tblRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tblAnestesistaRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As tblAnestesistaRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tblAnestesistaRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tblAnestesistaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tblEstudioSinCompRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As tblEstudioSinCompRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tblEstudioSinCompRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tblEstudioSinCompRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
