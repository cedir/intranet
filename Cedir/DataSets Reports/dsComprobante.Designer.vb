'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.42
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("dsComprobante"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsComprobante
    Inherits System.Data.DataSet
    
    Private tableComprobante As ComprobanteDataTable
    
    Private tableLineaDeComprobante As LineaDeComprobanteDataTable
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Comprobante")) Is Nothing) Then
                MyBase.Tables.Add(New ComprobanteDataTable(ds.Tables("Comprobante")))
            End If
            If (Not (ds.Tables("LineaDeComprobante")) Is Nothing) Then
                MyBase.Tables.Add(New LineaDeComprobanteDataTable(ds.Tables("LineaDeComprobante")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Comprobante() As ComprobanteDataTable
        Get
            Return Me.tableComprobante
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property LineaDeComprobante() As LineaDeComprobanteDataTable
        Get
            Return Me.tableLineaDeComprobante
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.BrowsableAttribute(true),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As dsComprobante = CType(MyBase.Clone,dsComprobante)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("Comprobante")) Is Nothing) Then
                MyBase.Tables.Add(New ComprobanteDataTable(ds.Tables("Comprobante")))
            End If
            If (Not (ds.Tables("LineaDeComprobante")) Is Nothing) Then
                MyBase.Tables.Add(New LineaDeComprobanteDataTable(ds.Tables("LineaDeComprobante")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableComprobante = CType(MyBase.Tables("Comprobante"),ComprobanteDataTable)
        If (initTable = true) Then
            If (Not (Me.tableComprobante) Is Nothing) Then
                Me.tableComprobante.InitVars
            End If
        End If
        Me.tableLineaDeComprobante = CType(MyBase.Tables("LineaDeComprobante"),LineaDeComprobanteDataTable)
        If (initTable = true) Then
            If (Not (Me.tableLineaDeComprobante) Is Nothing) Then
                Me.tableLineaDeComprobante.InitVars
            End If
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsComprobante"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsComprobante.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableComprobante = New ComprobanteDataTable
        MyBase.Tables.Add(Me.tableComprobante)
        Me.tableLineaDeComprobante = New LineaDeComprobanteDataTable
        MyBase.Tables.Add(Me.tableLineaDeComprobante)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeComprobante() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeLineaDeComprobante() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsComprobante = New dsComprobante
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function
    
    Public Delegate Sub ComprobanteRowChangeEventHandler(ByVal sender As Object, ByVal e As ComprobanteRowChangeEvent)
    
    Public Delegate Sub LineaDeComprobanteRowChangeEventHandler(ByVal sender As Object, ByVal e As LineaDeComprobanteRowChangeEvent)
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ComprobanteDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnid As System.Data.DataColumn
        
        Private columnnombreCliente As System.Data.DataColumn
        
        Private columndomicilio As System.Data.DataColumn
        
        Private columnnroCuit As System.Data.DataColumn
        
        Private columncondicionFiscal As System.Data.DataColumn
        
        Private columnresponsable As System.Data.DataColumn
        
        Private columntipoComprobante As System.Data.DataColumn
        
        Private columnfechaEmision As System.Data.DataColumn
        
        Private columnestado As System.Data.DataColumn
        
        Private columnsubtipo As System.Data.DataColumn
        
        Private columntotalFacturado As System.Data.DataColumn
        
        Private columngravado As System.Data.DataColumn
        
        Private columnnroComprobante As System.Data.DataColumn
        
        Private columnleyendaOpcional As System.Data.DataColumn
        
        Private columngravadoPaciente As System.Data.DataColumn
        
        Private columnColumn1 As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Comprobante"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property idColumn() As System.Data.DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nombreClienteColumn() As System.Data.DataColumn
            Get
                Return Me.columnnombreCliente
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property domicilioColumn() As System.Data.DataColumn
            Get
                Return Me.columndomicilio
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nroCuitColumn() As System.Data.DataColumn
            Get
                Return Me.columnnroCuit
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property condicionFiscalColumn() As System.Data.DataColumn
            Get
                Return Me.columncondicionFiscal
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property responsableColumn() As System.Data.DataColumn
            Get
                Return Me.columnresponsable
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tipoComprobanteColumn() As System.Data.DataColumn
            Get
                Return Me.columntipoComprobante
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fechaEmisionColumn() As System.Data.DataColumn
            Get
                Return Me.columnfechaEmision
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property estadoColumn() As System.Data.DataColumn
            Get
                Return Me.columnestado
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property subtipoColumn() As System.Data.DataColumn
            Get
                Return Me.columnsubtipo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property totalFacturadoColumn() As System.Data.DataColumn
            Get
                Return Me.columntotalFacturado
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property gravadoColumn() As System.Data.DataColumn
            Get
                Return Me.columngravado
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nroComprobanteColumn() As System.Data.DataColumn
            Get
                Return Me.columnnroComprobante
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property leyendaOpcionalColumn() As System.Data.DataColumn
            Get
                Return Me.columnleyendaOpcional
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property gravadoPacienteColumn() As System.Data.DataColumn
            Get
                Return Me.columngravadoPaciente
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Column1Column() As System.Data.DataColumn
            Get
                Return Me.columnColumn1
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ComprobanteRow
            Get
                Return CType(Me.Rows(index),ComprobanteRow)
            End Get
        End Property
        
        Public Event ComprobanteRowChanging As ComprobanteRowChangeEventHandler
        
        Public Event ComprobanteRowChanged As ComprobanteRowChangeEventHandler
        
        Public Event ComprobanteRowDeleting As ComprobanteRowChangeEventHandler
        
        Public Event ComprobanteRowDeleted As ComprobanteRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddComprobanteRow(ByVal row As ComprobanteRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddComprobanteRow( _
                    ByVal id As String,  _
                    ByVal nombreCliente As String,  _
                    ByVal domicilio As String,  _
                    ByVal nroCuit As String,  _
                    ByVal condicionFiscal As String,  _
                    ByVal responsable As String,  _
                    ByVal tipoComprobante As String,  _
                    ByVal fechaEmision As String,  _
                    ByVal estado As String,  _
                    ByVal subtipo As String,  _
                    ByVal totalFacturado As String,  _
                    ByVal gravado As String,  _
                    ByVal nroComprobante As String,  _
                    ByVal leyendaOpcional As String,  _
                    ByVal gravadoPaciente As String,  _
                    ByVal Column1 As String) As ComprobanteRow
            Dim rowComprobanteRow As ComprobanteRow = CType(Me.NewRow,ComprobanteRow)
            rowComprobanteRow.ItemArray = New Object() {id, nombreCliente, domicilio, nroCuit, condicionFiscal, responsable, tipoComprobante, fechaEmision, estado, subtipo, totalFacturado, gravado, nroComprobante, leyendaOpcional, gravadoPaciente, Column1}
            Me.Rows.Add(rowComprobanteRow)
            Return rowComprobanteRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As ComprobanteDataTable = CType(MyBase.Clone,ComprobanteDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New ComprobanteDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnid = MyBase.Columns("id")
            Me.columnnombreCliente = MyBase.Columns("nombreCliente")
            Me.columndomicilio = MyBase.Columns("domicilio")
            Me.columnnroCuit = MyBase.Columns("nroCuit")
            Me.columncondicionFiscal = MyBase.Columns("condicionFiscal")
            Me.columnresponsable = MyBase.Columns("responsable")
            Me.columntipoComprobante = MyBase.Columns("tipoComprobante")
            Me.columnfechaEmision = MyBase.Columns("fechaEmision")
            Me.columnestado = MyBase.Columns("estado")
            Me.columnsubtipo = MyBase.Columns("subtipo")
            Me.columntotalFacturado = MyBase.Columns("totalFacturado")
            Me.columngravado = MyBase.Columns("gravado")
            Me.columnnroComprobante = MyBase.Columns("nroComprobante")
            Me.columnleyendaOpcional = MyBase.Columns("leyendaOpcional")
            Me.columngravadoPaciente = MyBase.Columns("gravadoPaciente")
            Me.columnColumn1 = MyBase.Columns("Column1")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnid = New System.Data.DataColumn("id", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid)
            Me.columnnombreCliente = New System.Data.DataColumn("nombreCliente", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnombreCliente)
            Me.columndomicilio = New System.Data.DataColumn("domicilio", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndomicilio)
            Me.columnnroCuit = New System.Data.DataColumn("nroCuit", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnroCuit)
            Me.columncondicionFiscal = New System.Data.DataColumn("condicionFiscal", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncondicionFiscal)
            Me.columnresponsable = New System.Data.DataColumn("responsable", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnresponsable)
            Me.columntipoComprobante = New System.Data.DataColumn("tipoComprobante", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntipoComprobante)
            Me.columnfechaEmision = New System.Data.DataColumn("fechaEmision", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfechaEmision)
            Me.columnestado = New System.Data.DataColumn("estado", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnestado)
            Me.columnsubtipo = New System.Data.DataColumn("subtipo", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsubtipo)
            Me.columntotalFacturado = New System.Data.DataColumn("totalFacturado", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntotalFacturado)
            Me.columngravado = New System.Data.DataColumn("gravado", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columngravado)
            Me.columnnroComprobante = New System.Data.DataColumn("nroComprobante", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnroComprobante)
            Me.columnleyendaOpcional = New System.Data.DataColumn("leyendaOpcional", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnleyendaOpcional)
            Me.columngravadoPaciente = New System.Data.DataColumn("gravadoPaciente", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columngravadoPaciente)
            Me.columnColumn1 = New System.Data.DataColumn("Column1", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnColumn1)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewComprobanteRow() As ComprobanteRow
            Return CType(Me.NewRow,ComprobanteRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New ComprobanteRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ComprobanteRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ComprobanteRowChangedEvent) Is Nothing) Then
                RaiseEvent ComprobanteRowChanged(Me, New ComprobanteRowChangeEvent(CType(e.Row,ComprobanteRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ComprobanteRowChangingEvent) Is Nothing) Then
                RaiseEvent ComprobanteRowChanging(Me, New ComprobanteRowChangeEvent(CType(e.Row,ComprobanteRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ComprobanteRowDeletedEvent) Is Nothing) Then
                RaiseEvent ComprobanteRowDeleted(Me, New ComprobanteRowChangeEvent(CType(e.Row,ComprobanteRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ComprobanteRowDeletingEvent) Is Nothing) Then
                RaiseEvent ComprobanteRowDeleting(Me, New ComprobanteRowChangeEvent(CType(e.Row,ComprobanteRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveComprobanteRow(ByVal row As ComprobanteRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsComprobante = New dsComprobante
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ComprobanteDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class LineaDeComprobanteDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnid As System.Data.DataColumn
        
        Private columnconcepto As System.Data.DataColumn
        
        Private columnsubtotal As System.Data.DataColumn
        
        Private columnidComprobante As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "LineaDeComprobante"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property idColumn() As System.Data.DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property conceptoColumn() As System.Data.DataColumn
            Get
                Return Me.columnconcepto
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property subtotalColumn() As System.Data.DataColumn
            Get
                Return Me.columnsubtotal
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property idComprobanteColumn() As System.Data.DataColumn
            Get
                Return Me.columnidComprobante
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As LineaDeComprobanteRow
            Get
                Return CType(Me.Rows(index),LineaDeComprobanteRow)
            End Get
        End Property
        
        Public Event LineaDeComprobanteRowChanging As LineaDeComprobanteRowChangeEventHandler
        
        Public Event LineaDeComprobanteRowChanged As LineaDeComprobanteRowChangeEventHandler
        
        Public Event LineaDeComprobanteRowDeleting As LineaDeComprobanteRowChangeEventHandler
        
        Public Event LineaDeComprobanteRowDeleted As LineaDeComprobanteRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddLineaDeComprobanteRow(ByVal row As LineaDeComprobanteRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddLineaDeComprobanteRow(ByVal id As String, ByVal concepto As String, ByVal subtotal As String, ByVal idComprobante As String) As LineaDeComprobanteRow
            Dim rowLineaDeComprobanteRow As LineaDeComprobanteRow = CType(Me.NewRow,LineaDeComprobanteRow)
            rowLineaDeComprobanteRow.ItemArray = New Object() {id, concepto, subtotal, idComprobante}
            Me.Rows.Add(rowLineaDeComprobanteRow)
            Return rowLineaDeComprobanteRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As LineaDeComprobanteDataTable = CType(MyBase.Clone,LineaDeComprobanteDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New LineaDeComprobanteDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnid = MyBase.Columns("id")
            Me.columnconcepto = MyBase.Columns("concepto")
            Me.columnsubtotal = MyBase.Columns("subtotal")
            Me.columnidComprobante = MyBase.Columns("idComprobante")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnid = New System.Data.DataColumn("id", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid)
            Me.columnconcepto = New System.Data.DataColumn("concepto", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnconcepto)
            Me.columnsubtotal = New System.Data.DataColumn("subtotal", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsubtotal)
            Me.columnidComprobante = New System.Data.DataColumn("idComprobante", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnidComprobante)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewLineaDeComprobanteRow() As LineaDeComprobanteRow
            Return CType(Me.NewRow,LineaDeComprobanteRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New LineaDeComprobanteRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(LineaDeComprobanteRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.LineaDeComprobanteRowChangedEvent) Is Nothing) Then
                RaiseEvent LineaDeComprobanteRowChanged(Me, New LineaDeComprobanteRowChangeEvent(CType(e.Row,LineaDeComprobanteRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.LineaDeComprobanteRowChangingEvent) Is Nothing) Then
                RaiseEvent LineaDeComprobanteRowChanging(Me, New LineaDeComprobanteRowChangeEvent(CType(e.Row,LineaDeComprobanteRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.LineaDeComprobanteRowDeletedEvent) Is Nothing) Then
                RaiseEvent LineaDeComprobanteRowDeleted(Me, New LineaDeComprobanteRowChangeEvent(CType(e.Row,LineaDeComprobanteRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.LineaDeComprobanteRowDeletingEvent) Is Nothing) Then
                RaiseEvent LineaDeComprobanteRowDeleting(Me, New LineaDeComprobanteRowChangeEvent(CType(e.Row,LineaDeComprobanteRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveLineaDeComprobanteRow(ByVal row As LineaDeComprobanteRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsComprobante = New dsComprobante
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "LineaDeComprobanteDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ComprobanteRow
        Inherits System.Data.DataRow
        
        Private tableComprobante As ComprobanteDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableComprobante = CType(Me.Table,ComprobanteDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property id() As String
            Get
                Try 
                    Return CType(Me(Me.tableComprobante.idColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'id' de la tabla 'Comprobante' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComprobante.idColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nombreCliente() As String
            Get
                Try 
                    Return CType(Me(Me.tableComprobante.nombreClienteColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'nombreCliente' de la tabla 'Comprobante' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComprobante.nombreClienteColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property domicilio() As String
            Get
                Try 
                    Return CType(Me(Me.tableComprobante.domicilioColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'domicilio' de la tabla 'Comprobante' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComprobante.domicilioColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nroCuit() As String
            Get
                Try 
                    Return CType(Me(Me.tableComprobante.nroCuitColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'nroCuit' de la tabla 'Comprobante' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComprobante.nroCuitColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property condicionFiscal() As String
            Get
                Try 
                    Return CType(Me(Me.tableComprobante.condicionFiscalColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'condicionFiscal' de la tabla 'Comprobante' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComprobante.condicionFiscalColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property responsable() As String
            Get
                Try 
                    Return CType(Me(Me.tableComprobante.responsableColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'responsable' de la tabla 'Comprobante' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComprobante.responsableColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tipoComprobante() As String
            Get
                Try 
                    Return CType(Me(Me.tableComprobante.tipoComprobanteColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'tipoComprobante' de la tabla 'Comprobante' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComprobante.tipoComprobanteColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fechaEmision() As String
            Get
                Try 
                    Return CType(Me(Me.tableComprobante.fechaEmisionColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'fechaEmision' de la tabla 'Comprobante' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComprobante.fechaEmisionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property estado() As String
            Get
                Try 
                    Return CType(Me(Me.tableComprobante.estadoColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'estado' de la tabla 'Comprobante' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComprobante.estadoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property subtipo() As String
            Get
                Try 
                    Return CType(Me(Me.tableComprobante.subtipoColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'subtipo' de la tabla 'Comprobante' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComprobante.subtipoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property totalFacturado() As String
            Get
                Try 
                    Return CType(Me(Me.tableComprobante.totalFacturadoColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'totalFacturado' de la tabla 'Comprobante' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComprobante.totalFacturadoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property gravado() As String
            Get
                Try 
                    Return CType(Me(Me.tableComprobante.gravadoColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'gravado' de la tabla 'Comprobante' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComprobante.gravadoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nroComprobante() As String
            Get
                Try 
                    Return CType(Me(Me.tableComprobante.nroComprobanteColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'nroComprobante' de la tabla 'Comprobante' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComprobante.nroComprobanteColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property leyendaOpcional() As String
            Get
                Try 
                    Return CType(Me(Me.tableComprobante.leyendaOpcionalColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'leyendaOpcional' de la tabla 'Comprobante' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComprobante.leyendaOpcionalColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property gravadoPaciente() As String
            Get
                Try 
                    Return CType(Me(Me.tableComprobante.gravadoPacienteColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'gravadoPaciente' de la tabla 'Comprobante' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComprobante.gravadoPacienteColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Column1() As String
            Get
                Try 
                    Return CType(Me(Me.tableComprobante.Column1Column),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Column1' de la tabla 'Comprobante' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComprobante.Column1Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsidNull() As Boolean
            Return Me.IsNull(Me.tableComprobante.idColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetidNull()
            Me(Me.tableComprobante.idColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnombreClienteNull() As Boolean
            Return Me.IsNull(Me.tableComprobante.nombreClienteColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnombreClienteNull()
            Me(Me.tableComprobante.nombreClienteColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdomicilioNull() As Boolean
            Return Me.IsNull(Me.tableComprobante.domicilioColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdomicilioNull()
            Me(Me.tableComprobante.domicilioColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnroCuitNull() As Boolean
            Return Me.IsNull(Me.tableComprobante.nroCuitColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnroCuitNull()
            Me(Me.tableComprobante.nroCuitColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscondicionFiscalNull() As Boolean
            Return Me.IsNull(Me.tableComprobante.condicionFiscalColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcondicionFiscalNull()
            Me(Me.tableComprobante.condicionFiscalColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsresponsableNull() As Boolean
            Return Me.IsNull(Me.tableComprobante.responsableColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetresponsableNull()
            Me(Me.tableComprobante.responsableColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstipoComprobanteNull() As Boolean
            Return Me.IsNull(Me.tableComprobante.tipoComprobanteColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettipoComprobanteNull()
            Me(Me.tableComprobante.tipoComprobanteColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfechaEmisionNull() As Boolean
            Return Me.IsNull(Me.tableComprobante.fechaEmisionColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfechaEmisionNull()
            Me(Me.tableComprobante.fechaEmisionColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsestadoNull() As Boolean
            Return Me.IsNull(Me.tableComprobante.estadoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetestadoNull()
            Me(Me.tableComprobante.estadoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssubtipoNull() As Boolean
            Return Me.IsNull(Me.tableComprobante.subtipoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsubtipoNull()
            Me(Me.tableComprobante.subtipoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstotalFacturadoNull() As Boolean
            Return Me.IsNull(Me.tableComprobante.totalFacturadoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettotalFacturadoNull()
            Me(Me.tableComprobante.totalFacturadoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsgravadoNull() As Boolean
            Return Me.IsNull(Me.tableComprobante.gravadoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetgravadoNull()
            Me(Me.tableComprobante.gravadoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnroComprobanteNull() As Boolean
            Return Me.IsNull(Me.tableComprobante.nroComprobanteColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnroComprobanteNull()
            Me(Me.tableComprobante.nroComprobanteColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsleyendaOpcionalNull() As Boolean
            Return Me.IsNull(Me.tableComprobante.leyendaOpcionalColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetleyendaOpcionalNull()
            Me(Me.tableComprobante.leyendaOpcionalColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsgravadoPacienteNull() As Boolean
            Return Me.IsNull(Me.tableComprobante.gravadoPacienteColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetgravadoPacienteNull()
            Me(Me.tableComprobante.gravadoPacienteColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsColumn1Null() As Boolean
            Return Me.IsNull(Me.tableComprobante.Column1Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetColumn1Null()
            Me(Me.tableComprobante.Column1Column) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class LineaDeComprobanteRow
        Inherits System.Data.DataRow
        
        Private tableLineaDeComprobante As LineaDeComprobanteDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableLineaDeComprobante = CType(Me.Table,LineaDeComprobanteDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property id() As String
            Get
                Try 
                    Return CType(Me(Me.tableLineaDeComprobante.idColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'id' de la tabla 'LineaDeComprobante' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLineaDeComprobante.idColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property concepto() As String
            Get
                Try 
                    Return CType(Me(Me.tableLineaDeComprobante.conceptoColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'concepto' de la tabla 'LineaDeComprobante' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLineaDeComprobante.conceptoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property subtotal() As String
            Get
                Try 
                    Return CType(Me(Me.tableLineaDeComprobante.subtotalColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'subtotal' de la tabla 'LineaDeComprobante' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLineaDeComprobante.subtotalColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property idComprobante() As String
            Get
                Try 
                    Return CType(Me(Me.tableLineaDeComprobante.idComprobanteColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'idComprobante' de la tabla 'LineaDeComprobante' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableLineaDeComprobante.idComprobanteColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsidNull() As Boolean
            Return Me.IsNull(Me.tableLineaDeComprobante.idColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetidNull()
            Me(Me.tableLineaDeComprobante.idColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsconceptoNull() As Boolean
            Return Me.IsNull(Me.tableLineaDeComprobante.conceptoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetconceptoNull()
            Me(Me.tableLineaDeComprobante.conceptoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssubtotalNull() As Boolean
            Return Me.IsNull(Me.tableLineaDeComprobante.subtotalColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsubtotalNull()
            Me(Me.tableLineaDeComprobante.subtotalColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsidComprobanteNull() As Boolean
            Return Me.IsNull(Me.tableLineaDeComprobante.idComprobanteColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetidComprobanteNull()
            Me(Me.tableLineaDeComprobante.idComprobanteColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ComprobanteRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As ComprobanteRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ComprobanteRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ComprobanteRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class LineaDeComprobanteRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As LineaDeComprobanteRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As LineaDeComprobanteRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As LineaDeComprobanteRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
